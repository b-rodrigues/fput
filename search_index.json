[
["the-tidyverse.html", "Chapter 4 The tidyverse 4.1 Getting to know the tidyverse 4.2 Programming with the tidyverse", " Chapter 4 The tidyverse The tidyverse is the name given to a certain number of packages, most of all (if not all?) developed by, or co-developed by Hadley Wickham. There’s a website that introduces them all: The tidyverse. In this chapter, we are going to learn about some functions of some of these packages. We already know a little bit about purrr; let’s discover what these other packages have to offer! 4.1 Getting to know the tidyverse 4.1.1 Getting data into R with readr, readxl, haven and what are tibbles 4.1.2 Transforming your data with dplyr and tidyr 4.1.3 Functional programming with purrr and purrrlyr 4.1.4 Special packages for special kinds of data: forcats, lubridate, and stringr 4.2 Programming with the tidyverse 4.2.1 The naive approach Functions are very powerful because by using them, we avoid repetition. This means that we must be able to write functions that allow the user to abstract over certain things, such as columns names of datasets. So for example, one would like to use a function that would look like that: my_function(my_data, column) and in this chapter we will learn together how to do that using dplyr (version 0.70 or above). I advise you to also read the “Programming with dplyr” vignette here, which explains with great detail the concept I will only skim in this chapter! Consider the following code: data(mtcars) simple_function &lt;- function(dataset, col_name){ dataset %&gt;% group_by(col_name) %&gt;% summarise(mean_mpg = mean(mpg)) -&gt; dataset return(dataset) } When you try to run this: simple_function(mtcars, &quot;cyl&quot;) This is the error you get: Error in grouped_df_impl(data, unname(vars), drop) : Column `col_name` is unknown R is literally looking for a column called col_name in the mtcars dataset. How to solve this issue and make R understand to not take “cyl” literally as a string, but to interpret it? 4.2.2 Getting serious with rlang One way is to use the quo() function, in conjunction with the !! operator introduced with dplyr 0.7 (but actually part of the rlang package, which gets used by dplyr seamlessly). First let’s look at the solution and then I’ll explain how it works: library(dplyr) simple_function &lt;- function(dataset, col_name){ col_name &lt;- enquo(col_name) dataset %&gt;% group_by(!!col_name) %&gt;% summarise(mean_mpg = mean(mpg)) -&gt; dataset return(dataset) } simple_function(mtcars, cyl) ## # A tibble: 3 x 2 ## cyl mean_mpg ## &lt;dbl&gt; &lt;dbl&gt; ## 1 4 26.66364 ## 2 6 19.74286 ## 3 8 15.10000 "]
]
